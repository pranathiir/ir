import math
from collections import Counter

def build_matrix(documents):
    all_terms = set()
    processed_docs = []

    for doc in documents:
        tokens = doc.lower().split()
        processed_docs.append(tokens)
        all_terms.update(tokens)

    vocab = sorted(all_terms)  # Sorted vocabulary
    matrix = []
    for term in vocab:
        row = []
        for doc_tokens in processed_docs:
            row.append(1 if term in doc_tokens else 0)
        matrix.append(row)

    return vocab, matrix

def get_term_vector(term, vocab, matrix, num_docs):
    term = term.lower()
    if term not in vocab:
        return [0] * num_docs
    term_idx = vocab.index(term)
    return matrix[term_idx]

def boolean_and(vec1, vec2):
    return [a & b for a, b in zip(vec1, vec2)]

def boolean_or(vec1, vec2):
    return [a | b for a, b in zip(vec1, vec2)]

def boolean_not(vec):
    return [1 - x for x in vec]

def search(query, vocab, matrix, documents):
    num_docs = len(documents)
    query = query.lower().strip()

    if ' ' not in query:
        result_vector = get_term_vector(query, vocab, matrix, num_docs)

    elif ' and ' in query:
        terms = [t.strip() for t in query.split(' and ')]
        result_vector = get_term_vector(terms[0], vocab, matrix, num_docs)
        for term in terms[1:]:
            result_vector = boolean_and(result_vector,
                                        get_term_vector(term, vocab, matrix, num_docs))

    elif ' or ' in query:
        terms = [t.strip() for t in query.split(' or ')]
        result_vector = get_term_vector(terms[0], vocab, matrix, num_docs)
        for term in terms[1:]:
            result_vector = boolean_or(result_vector,
                                       get_term_vector(term, vocab, matrix, num_docs))

    elif ' not ' in query:
        parts = query.split(' not ')
        pos_term = parts[0].strip()
        neg_term = parts[1].strip()

        pos_vec = get_term_vector(pos_term, vocab, matrix, num_docs)
        neg_vec = boolean_not(get_term_vector(neg_term, vocab, matrix, num_docs))
        result_vector = boolean_and(pos_vec, neg_vec)

    else:
        result_vector = [0] * num_docs

    return [i for i, val in enumerate(result_vector) if val == 1]

def print_matrix(vocab, matrix, documents):
    print("Term-Document Matrix:")
    print("Terms\\Docs", end="")
    for i in range(len(documents)):
        print(f"\tD{i}", end="")
    print()

    for i, term in enumerate(vocab):
        print(f"{term:<10}", end="")
        for val in matrix[i]:
            print(f"\t{val}", end="")
        print()

if __name__ == "__main__":
    documents = [
        "information retrieval system",
        "database search query",
        "information system database",
        "web search engine",
        "query processing system"
    ]

    vocab, matrix = build_matrix(documents)

    print_matrix(vocab, matrix, documents)

    print("\nSearch Results:")
    print("'information':", search("information", vocab, matrix, documents))
    print("'information and system':", search("information and system", vocab, matrix, documents))
    print("'search or query':", search("search or query", vocab, matrix, documents))
    print("'system not database':", search("system not database", vocab, matrix, documents))
