import math

docs = [
    "information retrieval system",
    "database search query", 
    "information system database",
    "web search engine",
    "query processing system"
]

def preprocess(docs):
    vocab_set = set()
    processed_docs = []

    for doc in docs:
        tokens = set(doc.lower().split())  # unique tokens per doc
        processed_docs.append(tokens)
        vocab_set.update(tokens)

    vocab = sorted(vocab_set)

    binary_matrix = []
    for tokens in processed_docs:
        row = [1 if term in tokens else 0 for term in vocab]
        binary_matrix.append(row)

    return vocab, binary_matrix, processed_docs

def phase1_estimate(query_terms, vocab, binary_matrix):
    N_d = len(binary_matrix)  # total docs
    estimates = {}

    for term in query_terms:
        if term not in vocab:
            continue

        term_idx = vocab.index(term)
        d_k = sum(1 for doc in binary_matrix if doc[term_idx] == 1)
        p_k = 0.5  # assume 50% chance relevant
        q_k = (d_k + 0.5) / (N_d + 1)

        estimates[term] = {"d_k": d_k, "p_k": p_k, "q_k": q_k}

    return estimates

def phase2_estimate(query_terms, vocab, binary_matrix, relevant_docs):
    N_d = len(binary_matrix)
    N_r = len(relevant_docs)
    estimates = {}

    for term in query_terms:
        if term not in vocab:
            continue

        term_idx = vocab.index(term)
        r_k = sum(1 for doc_id in relevant_docs if binary_matrix[doc_id][term_idx] == 1)
        d_k = sum(1 for doc in binary_matrix if doc[term_idx] == 1)
        p_k = (r_k + 0.5) / (N_r + 1)
        q_k = (d_k - r_k + 0.5) / (N_d - N_r + 1)

        estimates[term] = {"r_k": r_k, "d_k": d_k, "p_k": p_k, "q_k": q_k}

    return estimates

def calculate_rsv(doc_id, query_terms, vocab, binary_matrix, estimates):
    rsv = 0
    for term in query_terms:
        if term not in estimates:
            continue

        term_idx = vocab.index(term)
        p_k = estimates[term]["p_k"]
        q_k = estimates[term]["q_k"]

        if binary_matrix[doc_id][term_idx] == 1:  # term present in doc
            if p_k > 0 and q_k > 0:
                rsv += math.log(p_k / q_k)
        else:  # term absent in doc
            if p_k < 1 and q_k < 1:
                rsv += math.log((1 - p_k) / (1 - q_k))

    return rsv

def search(query, vocab, binary_matrix, estimates, top_k=5):
    scores = []
    for doc_id in range(len(binary_matrix)):
        rsv = calculate_rsv(doc_id, query.split(), vocab, binary_matrix, estimates)
        scores.append((doc_id, rsv))

    scores.sort(key=lambda x: x[1], reverse=True)
    return scores[:top_k]

if __name__ == "__main__":
    vocab, binary_matrix, processed_docs = preprocess(docs)
    query = "information system"
    query_terms = query.split()

    # --- Phase I ---
    print("=== PHASE I (No Relevance Info) ===")
    est1 = phase1_estimate(query_terms, vocab, binary_matrix)
    for t, e in est1.items():
        print(f"{t}: d_k={e['d_k']}, p_k={e['p_k']:.3f}, q_k={e['q_k']:.3f}")

    results1 = search(query, vocab, binary_matrix, est1)
    print("Phase I Results:", results1)

    # --- Phase II ---
    print("\n=== PHASE II (With Relevance Feedback) ===")
    relevant_docs = [0, 2]  # assume docs 0,2 are relevant
    est2 = phase2_estimate(query_terms, vocab, binary_matrix, relevant_docs)
    for t, e in est2.items():
        print(f"{t}: r_k={e['r_k']}, d_k={e['d_k']}, p_k={e['p_k']:.3f}, q_k={e['q_k']:.3f}")

    results2 = search(query, vocab, binary_matrix, est2)
    print("Phase II Results:", results2)
